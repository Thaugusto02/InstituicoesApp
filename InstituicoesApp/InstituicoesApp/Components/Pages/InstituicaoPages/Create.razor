@page "/instituicao/create"
@inject InstituicoesApp.Data.ApplicationDbContext DB
@using InstituicoesApp.Data
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h4>Instituicao</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Instituicao" OnValidSubmit="AddInstituicao" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="mb-3">
                <label for="nome" class="form-label">Nome:</label> 
                <InputText id="nome" @bind-Value="Instituicao.Nome" class="form-control" /> 
                <ValidationMessage For="() => Instituicao.Nome" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="endereço" class="form-label">Endereço:</label> 
                <InputText id="endereço" @bind-Value="Instituicao.Endereço" class="form-control" /> 
                <ValidationMessage For="() => Instituicao.Endereço" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="descricao" class="form-label">Descricao:</label> 
                <InputText id="descricao" @bind-Value="Instituicao.Descricao" class="form-control" /> 
                <ValidationMessage For="() => Instituicao.Descricao" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/instituicaos">Back to List</a>
</div>

@code {

    [SupplyParameterFromForm]
    public Instituicao Instituicao { get; set; } = new();

    // To protect from overposting attacks, see https://aka.ms/RazorPagesCRUD
    public async Task AddInstituicao()
    {
        DB.Instituicoes.Add(Instituicao);
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo("/instituicaos");
    }
}
